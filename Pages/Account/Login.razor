@page "/Account/Login"
@using SEAPIRATE.Services
@using Microsoft.AspNetCore.Components.Forms
@inject AuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - SEAPIRATE</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">üè¥‚Äç‚ò†Ô∏è SEAPIRATE Login</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success">@successMessage</div>
                    }

                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <InputText id="username" class="form-control" @bind-value="loginModel.Username" />
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                            <ValidationMessage For="@(() => loginModel.Username)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2"></span>
                                }
                                Login
                            </button>
                        </div>
                    </EditForm>

                    <hr />
                    <div class="text-center">
                        <p>Don't have an account? <a href="/Account/Register">Register here</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    [Parameter, SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var (success, message) = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);
            
            if (success)
            {
                successMessage = message;
                // Use JavaScript to navigate after successful login to ensure proper state refresh
                await Task.Delay(500);
                Navigation.NavigateTo(ReturnUrl ?? "/dashboard", forceLoad: true);
            }
            else
            {
                errorMessage = message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during login: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}

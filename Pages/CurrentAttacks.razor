@page "/attacks"
@page "/current-attacks"
@using SEAPIRATE.Data
@using SEAPIRATE.Services
@using Microsoft.AspNetCore.Components.Forms
@inject AttackService AttackService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>SEAPIRATE - Attack Management</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">üéØ Attack Management</h1>
            <p class="lead text-muted">Plan, execute, and track your pirate raids</p>
        </div>
    </div>

    <div class="row">
        <!-- Suggested Attacks -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header bg-info text-white">
                    <h4 class="mb-0">üí° Suggested Attacks (@suggestedAttacks.Count)</h4>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    @if (suggestedAttacks.Count == 0)
                    {
                        <p class="text-muted">No suggested attacks available.</p>
                    }
                    else
                    {
                        @foreach (var attack in suggestedAttacks)
                        {
                            <div class="card mb-2 border-info">
                                <div class="card-body p-3">
                                    <h6 class="card-title">üèùÔ∏è @attack.TargetIsland</h6>
                                    <p class="card-text mb-1">
                                        <strong>Player:</strong> @attack.TargetPlayer<br>
                                        <strong>Expected:</strong> @attack.ExpectedResources.ToString("N0") resources<br>
                                        <strong>Time:</strong> @attack.SuggestedTime.ToString("g")
                                    </p>
                                    @if (!string.IsNullOrEmpty(attack.Notes))
                                    {
                                        <p class="card-text"><small class="text-muted">@attack.Notes</small></p>
                                    }
                                    <button class="btn btn-success btn-sm" @onclick="() => StartAttack(attack.Id)">
                                        ‚öîÔ∏è Start Attack
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Pending Attacks -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header bg-warning text-dark">
                    <h4 class="mb-0">‚è≥ Pending Attacks (@pendingAttacks.Count)</h4>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    @if (pendingAttacks.Count == 0)
                    {
                        <p class="text-muted">No pending attacks.</p>
                    }
                    else
                    {
                        @foreach (var attack in pendingAttacks)
                        {
                            <div class="card mb-2 border-warning">
                                <div class="card-body p-3">
                                    <h6 class="card-title">üèùÔ∏è @attack.TargetIsland</h6>
                                    <p class="card-text mb-1">
                                        <strong>Player:</strong> @attack.TargetPlayer<br>
                                        <strong>Expected:</strong> @attack.ExpectedResources.ToString("N0") resources<br>
                                        <strong>Started:</strong> @attack.StartedAt?.ToString("g")
                                    </p>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button class="btn btn-primary" @onclick="() => SubmitReport(attack.Id)">
                                            üìã Submit Report
                                        </button>
                                        <button class="btn btn-danger" @onclick="() => FailAttack(attack.Id)">
                                            ‚ùå Mark Failed
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <!-- Completed Attacks -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header bg-success text-white">
                    <h4 class="mb-0">‚úÖ Completed Attacks (@completedAttacks.Count)</h4>
                </div>
                <div class="card-body" style="max-height: 500px; overflow-y: auto;">
                    @if (completedAttacks.Count == 0)
                    {
                        <p class="text-muted">No completed attacks yet.</p>
                    }
                    else
                    {
                        @foreach (var attack in completedAttacks)
                        {
                            <div class="card mb-2 @(attack.Status == AttackStatus.Completed ? "border-success" : "border-danger")">
                                <div class="card-body p-3">
                                    <h6 class="card-title">üèùÔ∏è @attack.TargetIsland</h6>
                                    <p class="card-text mb-1">
                                        <strong>Player:</strong> @attack.TargetPlayer<br>
                                        <strong>Expected:</strong> @attack.ExpectedResources.ToString("N0")<br>
                                        @if (attack.Status == AttackStatus.Completed)
                                        {
                                            <strong>Actual:</strong> <span class="text-success">@attack.ActualResourcesGained?.ToString("N0")</span><br>
                                        }
                                        <strong>Completed:</strong> @attack.CompletedAt?.ToString("g")
                                    </p>
                                    <span class="badge @(attack.Status == AttackStatus.Completed ? "bg-success" : "bg-danger")">
                                        @(attack.Status == AttackStatus.Completed ? "‚úÖ Success" : "‚ùå Failed")
                                    </span>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Add New Attack -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">‚ûï Add New Attack Target</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@newAttack" OnValidSubmit="@AddNewAttack">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />
                        
                        <div class="row">
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label for="targetIsland" class="form-label">Target Island:</label>
                                    <InputText id="targetIsland" @bind-Value="newAttack.TargetIsland" class="form-control" placeholder="x:y:z" />
                                    <ValidationMessage For="@(() => newAttack.TargetIsland)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="form-group mb-3">
                                    <label for="targetPlayer" class="form-label">Target Player:</label>
                                    <InputText id="targetPlayer" @bind-Value="newAttack.TargetPlayer" class="form-control" placeholder="Player name" />
                                    <ValidationMessage For="@(() => newAttack.TargetPlayer)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group mb-3">
                                    <label for="expectedResources" class="form-label">Expected Resources:</label>
                                    <InputNumber id="expectedResources" @bind-Value="newAttack.ExpectedResources" class="form-control" />
                                    <ValidationMessage For="@(() => newAttack.ExpectedResources)" class="text-danger" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group mb-3">
                                    <label for="suggestedTime" class="form-label">Suggested Time:</label>
                                    <InputDate id="suggestedTime" @bind-Value="newAttack.SuggestedTime" class="form-control" />
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="form-group mb-3">
                                    <label class="form-label">&nbsp;</label>
                                    <div class="d-grid">
                                        <button type="submit" class="btn btn-primary">Add Target</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label for="notes" class="form-label">Notes:</label>
                                    <InputTextArea id="notes" @bind-Value="newAttack.Notes" class="form-control" rows="2" placeholder="Optional notes about this target..." />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AttackDto> suggestedAttacks = new();
    private List<AttackDto> pendingAttacks = new();
    private List<AttackDto> completedAttacks = new();
    private AddAttackDto newAttack = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAttacks();
    }

    private async Task LoadAttacks()
    {
        suggestedAttacks = await AttackService.GetSuggestedAttacksAsync();
        pendingAttacks = await AttackService.GetPendingAttacksAsync();
        completedAttacks = await AttackService.GetCompletedAttacksAsync();
    }

    private async Task StartAttack(Guid attackId)
    {
        await AttackService.StartAttackAsync(attackId);
        await LoadAttacks();
    }

    private async Task FailAttack(Guid attackId)
    {
        await AttackService.FailAttackAsync(attackId, "Marked as failed by user");
        await LoadAttacks();
    }

    private void SubmitReport(Guid attackId)
    {
        NavigationManager.NavigateTo($"/fightreport?attackId={attackId}");
    }

    private async Task AddNewAttack()
    {
        var attack = new AttackDto
        {
            TargetIsland = newAttack.TargetIsland,
            TargetPlayer = newAttack.TargetPlayer,
            ExpectedResources = newAttack.ExpectedResources,
            SuggestedTime = newAttack.SuggestedTime,
            Notes = newAttack.Notes,
            Status = AttackStatus.Suggested
        };

        await AttackService.AddAttackAsync(attack);
        newAttack = new AddAttackDto();
        await LoadAttacks();
    }
}
